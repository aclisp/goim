// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package secuserinfo

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Context
//  - Appid
//  - Yyuid
//  - Token
//  - EncodingType
type VerifyAppTokenReq struct {
  Context string `thrift:"context,1" db:"context" json:"context"`
  Appid string `thrift:"appid,2" db:"appid" json:"appid"`
  Yyuid int32 `thrift:"yyuid,3" db:"yyuid" json:"yyuid"`
  Token string `thrift:"token,4" db:"token" json:"token"`
  EncodingType int32 `thrift:"encoding_type,5" db:"encoding_type" json:"encoding_type"`
}

func NewVerifyAppTokenReq() *VerifyAppTokenReq {
  return &VerifyAppTokenReq{}
}


func (p *VerifyAppTokenReq) GetContext() string {
  return p.Context
}

func (p *VerifyAppTokenReq) GetAppid() string {
  return p.Appid
}

func (p *VerifyAppTokenReq) GetYyuid() int32 {
  return p.Yyuid
}

func (p *VerifyAppTokenReq) GetToken() string {
  return p.Token
}

func (p *VerifyAppTokenReq) GetEncodingType() int32 {
  return p.EncodingType
}
func (p *VerifyAppTokenReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyAppTokenReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Context = v
}
  return nil
}

func (p *VerifyAppTokenReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *VerifyAppTokenReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Yyuid = v
}
  return nil
}

func (p *VerifyAppTokenReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *VerifyAppTokenReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EncodingType = v
}
  return nil
}

func (p *VerifyAppTokenReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerifyAppTokenReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyAppTokenReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *VerifyAppTokenReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *VerifyAppTokenReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yyuid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yyuid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Yyuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yyuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yyuid: ", p), err) }
  return err
}

func (p *VerifyAppTokenReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:token: ", p), err) }
  return err
}

func (p *VerifyAppTokenReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("encoding_type", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:encoding_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.EncodingType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoding_type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:encoding_type: ", p), err) }
  return err
}

func (p *VerifyAppTokenReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyAppTokenReq(%+v)", *p)
}

// Attributes:
//  - Context
//  - Rescode
//  - Yyuid
//  - Passport
type VerifyAppTokenRes struct {
  Context string `thrift:"context,1" db:"context" json:"context"`
  Rescode int32 `thrift:"rescode,2" db:"rescode" json:"rescode"`
  Yyuid int32 `thrift:"yyuid,3" db:"yyuid" json:"yyuid"`
  Passport string `thrift:"passport,4" db:"passport" json:"passport"`
}

func NewVerifyAppTokenRes() *VerifyAppTokenRes {
  return &VerifyAppTokenRes{}
}


func (p *VerifyAppTokenRes) GetContext() string {
  return p.Context
}

func (p *VerifyAppTokenRes) GetRescode() int32 {
  return p.Rescode
}

func (p *VerifyAppTokenRes) GetYyuid() int32 {
  return p.Yyuid
}

func (p *VerifyAppTokenRes) GetPassport() string {
  return p.Passport
}
func (p *VerifyAppTokenRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyAppTokenRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Context = v
}
  return nil
}

func (p *VerifyAppTokenRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Rescode = v
}
  return nil
}

func (p *VerifyAppTokenRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Yyuid = v
}
  return nil
}

func (p *VerifyAppTokenRes)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Passport = v
}
  return nil
}

func (p *VerifyAppTokenRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerifyAppTokenRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyAppTokenRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *VerifyAppTokenRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rescode: ", p), err) }
  return err
}

func (p *VerifyAppTokenRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yyuid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yyuid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Yyuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yyuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yyuid: ", p), err) }
  return err
}

func (p *VerifyAppTokenRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:passport: ", p), err) }
  if err := oprot.WriteString(string(p.Passport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:passport: ", p), err) }
  return err
}

func (p *VerifyAppTokenRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyAppTokenRes(%+v)", *p)
}

// Attributes:
//  - Context
//  - Rescode
//  - Yyuid
//  - Passport
//  - MacAddrs
type VerifyAppTokenRes3 struct {
  Context string `thrift:"context,1" db:"context" json:"context"`
  Rescode int32 `thrift:"rescode,2" db:"rescode" json:"rescode"`
  Yyuid int32 `thrift:"yyuid,3" db:"yyuid" json:"yyuid"`
  Passport string `thrift:"passport,4" db:"passport" json:"passport"`
  MacAddrs string `thrift:"mac_addrs,5" db:"mac_addrs" json:"mac_addrs"`
}

func NewVerifyAppTokenRes3() *VerifyAppTokenRes3 {
  return &VerifyAppTokenRes3{}
}


func (p *VerifyAppTokenRes3) GetContext() string {
  return p.Context
}

func (p *VerifyAppTokenRes3) GetRescode() int32 {
  return p.Rescode
}

func (p *VerifyAppTokenRes3) GetYyuid() int32 {
  return p.Yyuid
}

func (p *VerifyAppTokenRes3) GetPassport() string {
  return p.Passport
}

func (p *VerifyAppTokenRes3) GetMacAddrs() string {
  return p.MacAddrs
}
func (p *VerifyAppTokenRes3) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyAppTokenRes3)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Context = v
}
  return nil
}

func (p *VerifyAppTokenRes3)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Rescode = v
}
  return nil
}

func (p *VerifyAppTokenRes3)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Yyuid = v
}
  return nil
}

func (p *VerifyAppTokenRes3)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Passport = v
}
  return nil
}

func (p *VerifyAppTokenRes3)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MacAddrs = v
}
  return nil
}

func (p *VerifyAppTokenRes3) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerifyAppTokenRes3"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyAppTokenRes3) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *VerifyAppTokenRes3) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rescode: ", p), err) }
  return err
}

func (p *VerifyAppTokenRes3) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yyuid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yyuid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Yyuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yyuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yyuid: ", p), err) }
  return err
}

func (p *VerifyAppTokenRes3) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:passport: ", p), err) }
  if err := oprot.WriteString(string(p.Passport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:passport: ", p), err) }
  return err
}

func (p *VerifyAppTokenRes3) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mac_addrs", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mac_addrs: ", p), err) }
  if err := oprot.WriteString(string(p.MacAddrs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mac_addrs (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mac_addrs: ", p), err) }
  return err
}

func (p *VerifyAppTokenRes3) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyAppTokenRes3(%+v)", *p)
}

// Attributes:
//  - Appid
//  - Token
//  - EncodingType
type AppToken struct {
  Appid string `thrift:"appid,1" db:"appid" json:"appid"`
  Token string `thrift:"token,2" db:"token" json:"token"`
  EncodingType int32 `thrift:"encoding_type,3" db:"encoding_type" json:"encoding_type"`
}

func NewAppToken() *AppToken {
  return &AppToken{}
}


func (p *AppToken) GetAppid() string {
  return p.Appid
}

func (p *AppToken) GetToken() string {
  return p.Token
}

func (p *AppToken) GetEncodingType() int32 {
  return p.EncodingType
}
func (p *AppToken) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AppToken)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *AppToken)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *AppToken)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EncodingType = v
}
  return nil
}

func (p *AppToken) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppToken"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppToken) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appid: ", p), err) }
  return err
}

func (p *AppToken) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *AppToken) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("encoding_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:encoding_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.EncodingType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoding_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:encoding_type: ", p), err) }
  return err
}

func (p *AppToken) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppToken(%+v)", *p)
}

// Attributes:
//  - Context
//  - Apptoken
//  - Smscontent
type SendMessageReq struct {
  Context string `thrift:"context,1" db:"context" json:"context"`
  Apptoken *AppToken `thrift:"apptoken,2" db:"apptoken" json:"apptoken"`
  Smscontent string `thrift:"smscontent,3" db:"smscontent" json:"smscontent"`
}

func NewSendMessageReq() *SendMessageReq {
  return &SendMessageReq{}
}


func (p *SendMessageReq) GetContext() string {
  return p.Context
}
var SendMessageReq_Apptoken_DEFAULT *AppToken
func (p *SendMessageReq) GetApptoken() *AppToken {
  if !p.IsSetApptoken() {
    return SendMessageReq_Apptoken_DEFAULT
  }
return p.Apptoken
}

func (p *SendMessageReq) GetSmscontent() string {
  return p.Smscontent
}
func (p *SendMessageReq) IsSetApptoken() bool {
  return p.Apptoken != nil
}

func (p *SendMessageReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendMessageReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Context = v
}
  return nil
}

func (p *SendMessageReq)  ReadField2(iprot thrift.TProtocol) error {
  p.Apptoken = &AppToken{}
  if err := p.Apptoken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Apptoken), err)
  }
  return nil
}

func (p *SendMessageReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Smscontent = v
}
  return nil
}

func (p *SendMessageReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendMessageReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendMessageReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *SendMessageReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("apptoken", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:apptoken: ", p), err) }
  if err := p.Apptoken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Apptoken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:apptoken: ", p), err) }
  return err
}

func (p *SendMessageReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("smscontent", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:smscontent: ", p), err) }
  if err := oprot.WriteString(string(p.Smscontent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.smscontent (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:smscontent: ", p), err) }
  return err
}

func (p *SendMessageReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendMessageReq(%+v)", *p)
}

// Attributes:
//  - Context
//  - Rescode
//  - Yyuid
//  - Passport
type SendMessageRes struct {
  Context string `thrift:"context,1" db:"context" json:"context"`
  Rescode int32 `thrift:"rescode,2" db:"rescode" json:"rescode"`
  Yyuid int32 `thrift:"yyuid,3" db:"yyuid" json:"yyuid"`
  Passport string `thrift:"passport,4" db:"passport" json:"passport"`
}

func NewSendMessageRes() *SendMessageRes {
  return &SendMessageRes{}
}


func (p *SendMessageRes) GetContext() string {
  return p.Context
}

func (p *SendMessageRes) GetRescode() int32 {
  return p.Rescode
}

func (p *SendMessageRes) GetYyuid() int32 {
  return p.Yyuid
}

func (p *SendMessageRes) GetPassport() string {
  return p.Passport
}
func (p *SendMessageRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendMessageRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Context = v
}
  return nil
}

func (p *SendMessageRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Rescode = v
}
  return nil
}

func (p *SendMessageRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Yyuid = v
}
  return nil
}

func (p *SendMessageRes)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Passport = v
}
  return nil
}

func (p *SendMessageRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendMessageRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendMessageRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *SendMessageRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rescode: ", p), err) }
  return err
}

func (p *SendMessageRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yyuid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yyuid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Yyuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yyuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yyuid: ", p), err) }
  return err
}

func (p *SendMessageRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:passport: ", p), err) }
  if err := oprot.WriteString(string(p.Passport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:passport: ", p), err) }
  return err
}

func (p *SendMessageRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendMessageRes(%+v)", *p)
}

// Attributes:
//  - Context
//  - Appid
//  - Yyuid
//  - Token
//  - EncodingType
type VerifyAppTokenReqEx64 struct {
  Context string `thrift:"context,1" db:"context" json:"context"`
  Appid string `thrift:"appid,2" db:"appid" json:"appid"`
  Yyuid int64 `thrift:"yyuid,3" db:"yyuid" json:"yyuid"`
  Token string `thrift:"token,4" db:"token" json:"token"`
  EncodingType int32 `thrift:"encoding_type,5" db:"encoding_type" json:"encoding_type"`
}

func NewVerifyAppTokenReqEx64() *VerifyAppTokenReqEx64 {
  return &VerifyAppTokenReqEx64{}
}


func (p *VerifyAppTokenReqEx64) GetContext() string {
  return p.Context
}

func (p *VerifyAppTokenReqEx64) GetAppid() string {
  return p.Appid
}

func (p *VerifyAppTokenReqEx64) GetYyuid() int64 {
  return p.Yyuid
}

func (p *VerifyAppTokenReqEx64) GetToken() string {
  return p.Token
}

func (p *VerifyAppTokenReqEx64) GetEncodingType() int32 {
  return p.EncodingType
}
func (p *VerifyAppTokenReqEx64) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyAppTokenReqEx64)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Context = v
}
  return nil
}

func (p *VerifyAppTokenReqEx64)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *VerifyAppTokenReqEx64)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Yyuid = v
}
  return nil
}

func (p *VerifyAppTokenReqEx64)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *VerifyAppTokenReqEx64)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EncodingType = v
}
  return nil
}

func (p *VerifyAppTokenReqEx64) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerifyAppTokenReqEx64"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyAppTokenReqEx64) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *VerifyAppTokenReqEx64) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *VerifyAppTokenReqEx64) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yyuid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yyuid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Yyuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yyuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yyuid: ", p), err) }
  return err
}

func (p *VerifyAppTokenReqEx64) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:token: ", p), err) }
  return err
}

func (p *VerifyAppTokenReqEx64) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("encoding_type", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:encoding_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.EncodingType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoding_type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:encoding_type: ", p), err) }
  return err
}

func (p *VerifyAppTokenReqEx64) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyAppTokenReqEx64(%+v)", *p)
}

// Attributes:
//  - Context
//  - Rescode
//  - Yyuid
//  - Passport
type VerifyAppTokenResEx64 struct {
  Context string `thrift:"context,1" db:"context" json:"context"`
  Rescode int32 `thrift:"rescode,2" db:"rescode" json:"rescode"`
  Yyuid int64 `thrift:"yyuid,3" db:"yyuid" json:"yyuid"`
  Passport string `thrift:"passport,4" db:"passport" json:"passport"`
}

func NewVerifyAppTokenResEx64() *VerifyAppTokenResEx64 {
  return &VerifyAppTokenResEx64{}
}


func (p *VerifyAppTokenResEx64) GetContext() string {
  return p.Context
}

func (p *VerifyAppTokenResEx64) GetRescode() int32 {
  return p.Rescode
}

func (p *VerifyAppTokenResEx64) GetYyuid() int64 {
  return p.Yyuid
}

func (p *VerifyAppTokenResEx64) GetPassport() string {
  return p.Passport
}
func (p *VerifyAppTokenResEx64) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyAppTokenResEx64)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Context = v
}
  return nil
}

func (p *VerifyAppTokenResEx64)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Rescode = v
}
  return nil
}

func (p *VerifyAppTokenResEx64)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Yyuid = v
}
  return nil
}

func (p *VerifyAppTokenResEx64)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Passport = v
}
  return nil
}

func (p *VerifyAppTokenResEx64) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerifyAppTokenResEx64"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyAppTokenResEx64) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *VerifyAppTokenResEx64) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rescode: ", p), err) }
  return err
}

func (p *VerifyAppTokenResEx64) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yyuid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yyuid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Yyuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yyuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yyuid: ", p), err) }
  return err
}

func (p *VerifyAppTokenResEx64) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:passport: ", p), err) }
  if err := oprot.WriteString(string(p.Passport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:passport: ", p), err) }
  return err
}

func (p *VerifyAppTokenResEx64) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyAppTokenResEx64(%+v)", *p)
}

// Attributes:
//  - Context
//  - Rescode
//  - Yyuid
//  - Passport
//  - MacAddrs
type VerifyAppTokenResMacEx64 struct {
  Context string `thrift:"context,1" db:"context" json:"context"`
  Rescode int32 `thrift:"rescode,2" db:"rescode" json:"rescode"`
  Yyuid int64 `thrift:"yyuid,3" db:"yyuid" json:"yyuid"`
  Passport string `thrift:"passport,4" db:"passport" json:"passport"`
  MacAddrs string `thrift:"mac_addrs,5" db:"mac_addrs" json:"mac_addrs"`
}

func NewVerifyAppTokenResMacEx64() *VerifyAppTokenResMacEx64 {
  return &VerifyAppTokenResMacEx64{}
}


func (p *VerifyAppTokenResMacEx64) GetContext() string {
  return p.Context
}

func (p *VerifyAppTokenResMacEx64) GetRescode() int32 {
  return p.Rescode
}

func (p *VerifyAppTokenResMacEx64) GetYyuid() int64 {
  return p.Yyuid
}

func (p *VerifyAppTokenResMacEx64) GetPassport() string {
  return p.Passport
}

func (p *VerifyAppTokenResMacEx64) GetMacAddrs() string {
  return p.MacAddrs
}
func (p *VerifyAppTokenResMacEx64) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyAppTokenResMacEx64)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Context = v
}
  return nil
}

func (p *VerifyAppTokenResMacEx64)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Rescode = v
}
  return nil
}

func (p *VerifyAppTokenResMacEx64)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Yyuid = v
}
  return nil
}

func (p *VerifyAppTokenResMacEx64)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Passport = v
}
  return nil
}

func (p *VerifyAppTokenResMacEx64)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MacAddrs = v
}
  return nil
}

func (p *VerifyAppTokenResMacEx64) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerifyAppTokenResMacEx64"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyAppTokenResMacEx64) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *VerifyAppTokenResMacEx64) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rescode: ", p), err) }
  return err
}

func (p *VerifyAppTokenResMacEx64) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yyuid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yyuid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Yyuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yyuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yyuid: ", p), err) }
  return err
}

func (p *VerifyAppTokenResMacEx64) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:passport: ", p), err) }
  if err := oprot.WriteString(string(p.Passport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:passport: ", p), err) }
  return err
}

func (p *VerifyAppTokenResMacEx64) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mac_addrs", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mac_addrs: ", p), err) }
  if err := oprot.WriteString(string(p.MacAddrs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mac_addrs (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mac_addrs: ", p), err) }
  return err
}

func (p *VerifyAppTokenResMacEx64) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyAppTokenResMacEx64(%+v)", *p)
}

// Attributes:
//  - Context
//  - Rescode
//  - Yyuid
//  - Passport
type SendMessageResEx64 struct {
  Context string `thrift:"context,1" db:"context" json:"context"`
  Rescode int32 `thrift:"rescode,2" db:"rescode" json:"rescode"`
  Yyuid int64 `thrift:"yyuid,3" db:"yyuid" json:"yyuid"`
  Passport string `thrift:"passport,4" db:"passport" json:"passport"`
}

func NewSendMessageResEx64() *SendMessageResEx64 {
  return &SendMessageResEx64{}
}


func (p *SendMessageResEx64) GetContext() string {
  return p.Context
}

func (p *SendMessageResEx64) GetRescode() int32 {
  return p.Rescode
}

func (p *SendMessageResEx64) GetYyuid() int64 {
  return p.Yyuid
}

func (p *SendMessageResEx64) GetPassport() string {
  return p.Passport
}
func (p *SendMessageResEx64) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendMessageResEx64)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Context = v
}
  return nil
}

func (p *SendMessageResEx64)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Rescode = v
}
  return nil
}

func (p *SendMessageResEx64)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Yyuid = v
}
  return nil
}

func (p *SendMessageResEx64)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Passport = v
}
  return nil
}

func (p *SendMessageResEx64) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendMessageResEx64"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendMessageResEx64) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *SendMessageResEx64) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rescode: ", p), err) }
  return err
}

func (p *SendMessageResEx64) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yyuid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yyuid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Yyuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yyuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yyuid: ", p), err) }
  return err
}

func (p *SendMessageResEx64) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:passport: ", p), err) }
  if err := oprot.WriteString(string(p.Passport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:passport: ", p), err) }
  return err
}

func (p *SendMessageResEx64) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendMessageResEx64(%+v)", *p)
}

type SecuserinfoService interface {
  // Parameters:
  //  - Seq
  LgSecuserinfoPing(ctx context.Context, seq int32) (r int32, err error)
  // Parameters:
  //  - Req
  LgSecuserinfoVerifyApptoken(ctx context.Context, req *VerifyAppTokenReq) (r *VerifyAppTokenRes, err error)
  // Parameters:
  //  - Req
  LgSecuserinfoVerifyApptoken3(ctx context.Context, req *VerifyAppTokenReq) (r *VerifyAppTokenRes3, err error)
  // Parameters:
  //  - Req
  LgSecuserinfoSendMessage(ctx context.Context, req *SendMessageReq) (r *SendMessageRes, err error)
  // Parameters:
  //  - Req
  LgSecuserinfoVerifyApptokenEx64(ctx context.Context, req *VerifyAppTokenReqEx64) (r *VerifyAppTokenResEx64, err error)
  // Parameters:
  //  - Req
  LgSecuserinfoVerifyApptokenMacEx64(ctx context.Context, req *VerifyAppTokenReqEx64) (r *VerifyAppTokenResMacEx64, err error)
  // Parameters:
  //  - Req
  LgSecuserinfoSendMessageEx64(ctx context.Context, req *SendMessageReq) (r *SendMessageResEx64, err error)
}

type SecuserinfoServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewSecuserinfoService instead
func NewSecuserinfoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SecuserinfoServiceClient {
  return &SecuserinfoServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewSecuserinfoService instead
func NewSecuserinfoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SecuserinfoServiceClient {
  return &SecuserinfoServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSecuserinfoServiceClient(c thrift.TClient) *SecuserinfoServiceClient {
  return &SecuserinfoServiceClient{
    c: c,
  }
}

// Parameters:
//  - Seq
func (p *SecuserinfoServiceClient) LgSecuserinfoPing(ctx context.Context, seq int32) (r int32, err error) {
  var _args0 SecuserinfoServiceLgSecuserinfoPingArgs
  _args0.Seq = seq
  var _result1 SecuserinfoServiceLgSecuserinfoPingResult
  if err = p.c.Call(ctx, "lg_secuserinfo_ping", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SecuserinfoServiceClient) LgSecuserinfoVerifyApptoken(ctx context.Context, req *VerifyAppTokenReq) (r *VerifyAppTokenRes, err error) {
  var _args2 SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs
  _args2.Req = req
  var _result3 SecuserinfoServiceLgSecuserinfoVerifyApptokenResult
  if err = p.c.Call(ctx, "lg_secuserinfo_verify_apptoken", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SecuserinfoServiceClient) LgSecuserinfoVerifyApptoken3(ctx context.Context, req *VerifyAppTokenReq) (r *VerifyAppTokenRes3, err error) {
  var _args4 SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args
  _args4.Req = req
  var _result5 SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result
  if err = p.c.Call(ctx, "lg_secuserinfo_verify_apptoken3", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SecuserinfoServiceClient) LgSecuserinfoSendMessage(ctx context.Context, req *SendMessageReq) (r *SendMessageRes, err error) {
  var _args6 SecuserinfoServiceLgSecuserinfoSendMessageArgs
  _args6.Req = req
  var _result7 SecuserinfoServiceLgSecuserinfoSendMessageResult
  if err = p.c.Call(ctx, "lg_secuserinfo_send_message", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SecuserinfoServiceClient) LgSecuserinfoVerifyApptokenEx64(ctx context.Context, req *VerifyAppTokenReqEx64) (r *VerifyAppTokenResEx64, err error) {
  var _args8 SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args
  _args8.Req = req
  var _result9 SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result
  if err = p.c.Call(ctx, "lg_secuserinfo_verify_apptokenEx64", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SecuserinfoServiceClient) LgSecuserinfoVerifyApptokenMacEx64(ctx context.Context, req *VerifyAppTokenReqEx64) (r *VerifyAppTokenResMacEx64, err error) {
  var _args10 SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args
  _args10.Req = req
  var _result11 SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result
  if err = p.c.Call(ctx, "lg_secuserinfo_verify_apptokenMacEx64", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SecuserinfoServiceClient) LgSecuserinfoSendMessageEx64(ctx context.Context, req *SendMessageReq) (r *SendMessageResEx64, err error) {
  var _args12 SecuserinfoServiceLgSecuserinfoSendMessageEx64Args
  _args12.Req = req
  var _result13 SecuserinfoServiceLgSecuserinfoSendMessageEx64Result
  if err = p.c.Call(ctx, "lg_secuserinfo_send_messageEx64", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

type SecuserinfoServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SecuserinfoService
}

func (p *SecuserinfoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SecuserinfoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SecuserinfoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSecuserinfoServiceProcessor(handler SecuserinfoService) *SecuserinfoServiceProcessor {

  self14 := &SecuserinfoServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self14.processorMap["lg_secuserinfo_ping"] = &secuserinfoServiceProcessorLgSecuserinfoPing{handler:handler}
  self14.processorMap["lg_secuserinfo_verify_apptoken"] = &secuserinfoServiceProcessorLgSecuserinfoVerifyApptoken{handler:handler}
  self14.processorMap["lg_secuserinfo_verify_apptoken3"] = &secuserinfoServiceProcessorLgSecuserinfoVerifyApptoken3{handler:handler}
  self14.processorMap["lg_secuserinfo_send_message"] = &secuserinfoServiceProcessorLgSecuserinfoSendMessage{handler:handler}
  self14.processorMap["lg_secuserinfo_verify_apptokenEx64"] = &secuserinfoServiceProcessorLgSecuserinfoVerifyApptokenEx64{handler:handler}
  self14.processorMap["lg_secuserinfo_verify_apptokenMacEx64"] = &secuserinfoServiceProcessorLgSecuserinfoVerifyApptokenMacEx64{handler:handler}
  self14.processorMap["lg_secuserinfo_send_messageEx64"] = &secuserinfoServiceProcessorLgSecuserinfoSendMessageEx64{handler:handler}
return self14
}

func (p *SecuserinfoServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x15.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x15

}

type secuserinfoServiceProcessorLgSecuserinfoPing struct {
  handler SecuserinfoService
}

func (p *secuserinfoServiceProcessorLgSecuserinfoPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecuserinfoServiceLgSecuserinfoPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecuserinfoServiceLgSecuserinfoPingResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.LgSecuserinfoPing(ctx, args.Seq); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lg_secuserinfo_ping: " + err2.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("lg_secuserinfo_ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secuserinfoServiceProcessorLgSecuserinfoVerifyApptoken struct {
  handler SecuserinfoService
}

func (p *secuserinfoServiceProcessorLgSecuserinfoVerifyApptoken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_verify_apptoken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecuserinfoServiceLgSecuserinfoVerifyApptokenResult{}
var retval *VerifyAppTokenRes
  var err2 error
  if retval, err2 = p.handler.LgSecuserinfoVerifyApptoken(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lg_secuserinfo_verify_apptoken: " + err2.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_verify_apptoken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("lg_secuserinfo_verify_apptoken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secuserinfoServiceProcessorLgSecuserinfoVerifyApptoken3 struct {
  handler SecuserinfoService
}

func (p *secuserinfoServiceProcessorLgSecuserinfoVerifyApptoken3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_verify_apptoken3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result{}
var retval *VerifyAppTokenRes3
  var err2 error
  if retval, err2 = p.handler.LgSecuserinfoVerifyApptoken3(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lg_secuserinfo_verify_apptoken3: " + err2.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_verify_apptoken3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("lg_secuserinfo_verify_apptoken3", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secuserinfoServiceProcessorLgSecuserinfoSendMessage struct {
  handler SecuserinfoService
}

func (p *secuserinfoServiceProcessorLgSecuserinfoSendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecuserinfoServiceLgSecuserinfoSendMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_send_message", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecuserinfoServiceLgSecuserinfoSendMessageResult{}
var retval *SendMessageRes
  var err2 error
  if retval, err2 = p.handler.LgSecuserinfoSendMessage(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lg_secuserinfo_send_message: " + err2.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_send_message", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("lg_secuserinfo_send_message", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secuserinfoServiceProcessorLgSecuserinfoVerifyApptokenEx64 struct {
  handler SecuserinfoService
}

func (p *secuserinfoServiceProcessorLgSecuserinfoVerifyApptokenEx64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_verify_apptokenEx64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result{}
var retval *VerifyAppTokenResEx64
  var err2 error
  if retval, err2 = p.handler.LgSecuserinfoVerifyApptokenEx64(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lg_secuserinfo_verify_apptokenEx64: " + err2.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_verify_apptokenEx64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("lg_secuserinfo_verify_apptokenEx64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secuserinfoServiceProcessorLgSecuserinfoVerifyApptokenMacEx64 struct {
  handler SecuserinfoService
}

func (p *secuserinfoServiceProcessorLgSecuserinfoVerifyApptokenMacEx64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_verify_apptokenMacEx64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result{}
var retval *VerifyAppTokenResMacEx64
  var err2 error
  if retval, err2 = p.handler.LgSecuserinfoVerifyApptokenMacEx64(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lg_secuserinfo_verify_apptokenMacEx64: " + err2.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_verify_apptokenMacEx64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("lg_secuserinfo_verify_apptokenMacEx64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secuserinfoServiceProcessorLgSecuserinfoSendMessageEx64 struct {
  handler SecuserinfoService
}

func (p *secuserinfoServiceProcessorLgSecuserinfoSendMessageEx64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecuserinfoServiceLgSecuserinfoSendMessageEx64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_send_messageEx64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecuserinfoServiceLgSecuserinfoSendMessageEx64Result{}
var retval *SendMessageResEx64
  var err2 error
  if retval, err2 = p.handler.LgSecuserinfoSendMessageEx64(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lg_secuserinfo_send_messageEx64: " + err2.Error())
    oprot.WriteMessageBegin("lg_secuserinfo_send_messageEx64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("lg_secuserinfo_send_messageEx64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Seq
type SecuserinfoServiceLgSecuserinfoPingArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
}

func NewSecuserinfoServiceLgSecuserinfoPingArgs() *SecuserinfoServiceLgSecuserinfoPingArgs {
  return &SecuserinfoServiceLgSecuserinfoPingArgs{}
}


func (p *SecuserinfoServiceLgSecuserinfoPingArgs) GetSeq() int32 {
  return p.Seq
}
func (p *SecuserinfoServiceLgSecuserinfoPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoPingArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoPingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoPingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SecuserinfoServiceLgSecuserinfoPingResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSecuserinfoServiceLgSecuserinfoPingResult() *SecuserinfoServiceLgSecuserinfoPingResult {
  return &SecuserinfoServiceLgSecuserinfoPingResult{}
}

var SecuserinfoServiceLgSecuserinfoPingResult_Success_DEFAULT int32
func (p *SecuserinfoServiceLgSecuserinfoPingResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return SecuserinfoServiceLgSecuserinfoPingResult_Success_DEFAULT
  }
return *p.Success
}
func (p *SecuserinfoServiceLgSecuserinfoPingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecuserinfoServiceLgSecuserinfoPingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoPingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoPingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoPingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoPingResult(%+v)", *p)
}

// Attributes:
//  - Req
type SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs struct {
  Req *VerifyAppTokenReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSecuserinfoServiceLgSecuserinfoVerifyApptokenArgs() *SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs {
  return &SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs{}
}

var SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs_Req_DEFAULT *VerifyAppTokenReq
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs) GetReq() *VerifyAppTokenReq {
  if !p.IsSetReq() {
    return SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs_Req_DEFAULT
  }
return p.Req
}
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &VerifyAppTokenReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_verify_apptoken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoVerifyApptokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SecuserinfoServiceLgSecuserinfoVerifyApptokenResult struct {
  Success *VerifyAppTokenRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSecuserinfoServiceLgSecuserinfoVerifyApptokenResult() *SecuserinfoServiceLgSecuserinfoVerifyApptokenResult {
  return &SecuserinfoServiceLgSecuserinfoVerifyApptokenResult{}
}

var SecuserinfoServiceLgSecuserinfoVerifyApptokenResult_Success_DEFAULT *VerifyAppTokenRes
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenResult) GetSuccess() *VerifyAppTokenRes {
  if !p.IsSetSuccess() {
    return SecuserinfoServiceLgSecuserinfoVerifyApptokenResult_Success_DEFAULT
  }
return p.Success
}
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &VerifyAppTokenRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_verify_apptoken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoVerifyApptokenResult(%+v)", *p)
}

// Attributes:
//  - Req
type SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args struct {
  Req *VerifyAppTokenReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSecuserinfoServiceLgSecuserinfoVerifyApptoken3Args() *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args {
  return &SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args{}
}

var SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args_Req_DEFAULT *VerifyAppTokenReq
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args) GetReq() *VerifyAppTokenReq {
  if !p.IsSetReq() {
    return SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args_Req_DEFAULT
  }
return p.Req
}
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args) IsSetReq() bool {
  return p.Req != nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &VerifyAppTokenReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_verify_apptoken3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoVerifyApptoken3Args(%+v)", *p)
}

// Attributes:
//  - Success
type SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result struct {
  Success *VerifyAppTokenRes3 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSecuserinfoServiceLgSecuserinfoVerifyApptoken3Result() *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result {
  return &SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result{}
}

var SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result_Success_DEFAULT *VerifyAppTokenRes3
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result) GetSuccess() *VerifyAppTokenRes3 {
  if !p.IsSetSuccess() {
    return SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result_Success_DEFAULT
  }
return p.Success
}
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &VerifyAppTokenRes3{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_verify_apptoken3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoVerifyApptoken3Result(%+v)", *p)
}

// Attributes:
//  - Req
type SecuserinfoServiceLgSecuserinfoSendMessageArgs struct {
  Req *SendMessageReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSecuserinfoServiceLgSecuserinfoSendMessageArgs() *SecuserinfoServiceLgSecuserinfoSendMessageArgs {
  return &SecuserinfoServiceLgSecuserinfoSendMessageArgs{}
}

var SecuserinfoServiceLgSecuserinfoSendMessageArgs_Req_DEFAULT *SendMessageReq
func (p *SecuserinfoServiceLgSecuserinfoSendMessageArgs) GetReq() *SendMessageReq {
  if !p.IsSetReq() {
    return SecuserinfoServiceLgSecuserinfoSendMessageArgs_Req_DEFAULT
  }
return p.Req
}
func (p *SecuserinfoServiceLgSecuserinfoSendMessageArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SendMessageReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_send_message_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoSendMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SecuserinfoServiceLgSecuserinfoSendMessageResult struct {
  Success *SendMessageRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSecuserinfoServiceLgSecuserinfoSendMessageResult() *SecuserinfoServiceLgSecuserinfoSendMessageResult {
  return &SecuserinfoServiceLgSecuserinfoSendMessageResult{}
}

var SecuserinfoServiceLgSecuserinfoSendMessageResult_Success_DEFAULT *SendMessageRes
func (p *SecuserinfoServiceLgSecuserinfoSendMessageResult) GetSuccess() *SendMessageRes {
  if !p.IsSetSuccess() {
    return SecuserinfoServiceLgSecuserinfoSendMessageResult_Success_DEFAULT
  }
return p.Success
}
func (p *SecuserinfoServiceLgSecuserinfoSendMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SendMessageRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_send_message_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoSendMessageResult(%+v)", *p)
}

// Attributes:
//  - Req
type SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args struct {
  Req *VerifyAppTokenReqEx64 `thrift:"req,1" db:"req" json:"req"`
}

func NewSecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args() *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args {
  return &SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args{}
}

var SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args_Req_DEFAULT *VerifyAppTokenReqEx64
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args) GetReq() *VerifyAppTokenReqEx64 {
  if !p.IsSetReq() {
    return SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args_Req_DEFAULT
  }
return p.Req
}
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args) IsSetReq() bool {
  return p.Req != nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &VerifyAppTokenReqEx64{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_verify_apptokenEx64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Args(%+v)", *p)
}

// Attributes:
//  - Success
type SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result struct {
  Success *VerifyAppTokenResEx64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result() *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result {
  return &SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result{}
}

var SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result_Success_DEFAULT *VerifyAppTokenResEx64
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result) GetSuccess() *VerifyAppTokenResEx64 {
  if !p.IsSetSuccess() {
    return SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result_Success_DEFAULT
  }
return p.Success
}
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &VerifyAppTokenResEx64{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_verify_apptokenEx64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoVerifyApptokenEx64Result(%+v)", *p)
}

// Attributes:
//  - Req
type SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args struct {
  Req *VerifyAppTokenReqEx64 `thrift:"req,1" db:"req" json:"req"`
}

func NewSecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args() *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args {
  return &SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args{}
}

var SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args_Req_DEFAULT *VerifyAppTokenReqEx64
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args) GetReq() *VerifyAppTokenReqEx64 {
  if !p.IsSetReq() {
    return SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args_Req_DEFAULT
  }
return p.Req
}
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args) IsSetReq() bool {
  return p.Req != nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &VerifyAppTokenReqEx64{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_verify_apptokenMacEx64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Args(%+v)", *p)
}

// Attributes:
//  - Success
type SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result struct {
  Success *VerifyAppTokenResMacEx64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result() *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result {
  return &SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result{}
}

var SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result_Success_DEFAULT *VerifyAppTokenResMacEx64
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result) GetSuccess() *VerifyAppTokenResMacEx64 {
  if !p.IsSetSuccess() {
    return SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result_Success_DEFAULT
  }
return p.Success
}
func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &VerifyAppTokenResMacEx64{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_verify_apptokenMacEx64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoVerifyApptokenMacEx64Result(%+v)", *p)
}

// Attributes:
//  - Req
type SecuserinfoServiceLgSecuserinfoSendMessageEx64Args struct {
  Req *SendMessageReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSecuserinfoServiceLgSecuserinfoSendMessageEx64Args() *SecuserinfoServiceLgSecuserinfoSendMessageEx64Args {
  return &SecuserinfoServiceLgSecuserinfoSendMessageEx64Args{}
}

var SecuserinfoServiceLgSecuserinfoSendMessageEx64Args_Req_DEFAULT *SendMessageReq
func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Args) GetReq() *SendMessageReq {
  if !p.IsSetReq() {
    return SecuserinfoServiceLgSecuserinfoSendMessageEx64Args_Req_DEFAULT
  }
return p.Req
}
func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Args) IsSetReq() bool {
  return p.Req != nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Args)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SendMessageReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_send_messageEx64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoSendMessageEx64Args(%+v)", *p)
}

// Attributes:
//  - Success
type SecuserinfoServiceLgSecuserinfoSendMessageEx64Result struct {
  Success *SendMessageResEx64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSecuserinfoServiceLgSecuserinfoSendMessageEx64Result() *SecuserinfoServiceLgSecuserinfoSendMessageEx64Result {
  return &SecuserinfoServiceLgSecuserinfoSendMessageEx64Result{}
}

var SecuserinfoServiceLgSecuserinfoSendMessageEx64Result_Success_DEFAULT *SendMessageResEx64
func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Result) GetSuccess() *SendMessageResEx64 {
  if !p.IsSetSuccess() {
    return SecuserinfoServiceLgSecuserinfoSendMessageEx64Result_Success_DEFAULT
  }
return p.Success
}
func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SendMessageResEx64{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lg_secuserinfo_send_messageEx64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecuserinfoServiceLgSecuserinfoSendMessageEx64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecuserinfoServiceLgSecuserinfoSendMessageEx64Result(%+v)", *p)
}


