// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tars.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	tars.proto
	attentionlist.proto

It has these top-level messages:
	RPCInput
	RPCOutput
	ServerPush
	PQueryUserAttentionListReq
	PQueryUserAttentionListRsp
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCInput struct {
	ServiceName   string            `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	MethodName    string            `protobuf:"bytes,2,opt,name=methodName" json:"methodName,omitempty"`
	RequestBuffer []byte            `protobuf:"bytes,3,opt,name=requestBuffer,proto3" json:"requestBuffer,omitempty"`
	Headers       map[string]string `protobuf:"bytes,4,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RPCInput) Reset()                    { *m = RPCInput{} }
func (m *RPCInput) String() string            { return proto.CompactTextString(m) }
func (*RPCInput) ProtoMessage()               {}
func (*RPCInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RPCInput) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RPCInput) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *RPCInput) GetRequestBuffer() []byte {
	if m != nil {
		return m.RequestBuffer
	}
	return nil
}

func (m *RPCInput) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

type RPCOutput struct {
	RetCode        int32             `protobuf:"zigzag32,1,opt,name=retCode" json:"retCode,omitempty"`
	ResponseBuffer []byte            `protobuf:"bytes,2,opt,name=responseBuffer,proto3" json:"responseBuffer,omitempty"`
	Headers        map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RetDesc        string            `protobuf:"bytes,4,opt,name=retDesc" json:"retDesc,omitempty"`
	ServiceName    string            `protobuf:"bytes,5,opt,name=serviceName" json:"serviceName,omitempty"`
	MethodName     string            `protobuf:"bytes,6,opt,name=methodName" json:"methodName,omitempty"`
}

func (m *RPCOutput) Reset()                    { *m = RPCOutput{} }
func (m *RPCOutput) String() string            { return proto.CompactTextString(m) }
func (*RPCOutput) ProtoMessage()               {}
func (*RPCOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RPCOutput) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *RPCOutput) GetResponseBuffer() []byte {
	if m != nil {
		return m.ResponseBuffer
	}
	return nil
}

func (m *RPCOutput) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RPCOutput) GetRetDesc() string {
	if m != nil {
		return m.RetDesc
	}
	return ""
}

func (m *RPCOutput) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RPCOutput) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

type ServerPush struct {
	MessageType int32             `protobuf:"zigzag32,1,opt,name=messageType" json:"messageType,omitempty"`
	PushBuffer  []byte            `protobuf:"bytes,2,opt,name=pushBuffer,proto3" json:"pushBuffer,omitempty"`
	Headers     map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MessageDesc string            `protobuf:"bytes,4,opt,name=messageDesc" json:"messageDesc,omitempty"`
	ServiceName string            `protobuf:"bytes,5,opt,name=serviceName" json:"serviceName,omitempty"`
	MethodName  string            `protobuf:"bytes,6,opt,name=methodName" json:"methodName,omitempty"`
}

func (m *ServerPush) Reset()                    { *m = ServerPush{} }
func (m *ServerPush) String() string            { return proto.CompactTextString(m) }
func (*ServerPush) ProtoMessage()               {}
func (*ServerPush) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServerPush) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *ServerPush) GetPushBuffer() []byte {
	if m != nil {
		return m.PushBuffer
	}
	return nil
}

func (m *ServerPush) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ServerPush) GetMessageDesc() string {
	if m != nil {
		return m.MessageDesc
	}
	return ""
}

func (m *ServerPush) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServerPush) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func init() {
	proto.RegisterType((*RPCInput)(nil), "main.RPCInput")
	proto.RegisterType((*RPCOutput)(nil), "main.RPCOutput")
	proto.RegisterType((*ServerPush)(nil), "main.ServerPush")
}

func init() { proto.RegisterFile("tars.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0xcb, 0x4a, 0xf3, 0x40,
	0x14, 0xc7, 0x49, 0xd2, 0xcb, 0xd7, 0xd3, 0x7e, 0xa2, 0x83, 0x8b, 0xe0, 0x8d, 0x50, 0x44, 0xba,
	0xca, 0x42, 0xf1, 0x42, 0x97, 0x56, 0x41, 0x37, 0x5a, 0x46, 0x5f, 0x60, 0x6c, 0x4f, 0x4d, 0xd1,
	0x5c, 0x9c, 0x4b, 0xa1, 0x0f, 0xe3, 0xda, 0x27, 0xf3, 0x3d, 0x24, 0x93, 0x8c, 0x99, 0x06, 0xc5,
	0x85, 0x0b, 0x77, 0x39, 0xff, 0x39, 0x70, 0xfe, 0xbf, 0x1f, 0x04, 0x40, 0x32, 0x2e, 0xc2, 0x8c,
	0xa7, 0x32, 0x25, 0x8d, 0x98, 0xcd, 0x93, 0xfe, 0xbb, 0x03, 0xff, 0xe8, 0x78, 0x74, 0x9d, 0x64,
	0x4a, 0x92, 0x00, 0xba, 0x02, 0xf9, 0x62, 0x3e, 0xc1, 0x1b, 0x16, 0xa3, 0xef, 0x04, 0xce, 0xa0,
	0x43, 0xed, 0x88, 0xec, 0x01, 0xc4, 0x28, 0xa3, 0x74, 0xaa, 0x17, 0x5c, 0xbd, 0x60, 0x25, 0x64,
	0x1f, 0xfe, 0x73, 0x7c, 0x51, 0x28, 0xe4, 0xb9, 0x9a, 0xcd, 0x90, 0xfb, 0x5e, 0xe0, 0x0c, 0x7a,
	0x74, 0x35, 0x24, 0xc7, 0xd0, 0x8e, 0x90, 0x4d, 0x91, 0x0b, 0xbf, 0x11, 0x78, 0x83, 0xee, 0xe1,
	0x76, 0x98, 0x97, 0x09, 0x4d, 0x91, 0xf0, 0xaa, 0x78, 0xbd, 0x4c, 0x24, 0x5f, 0x52, 0xb3, 0xbb,
	0x35, 0x84, 0x9e, 0xfd, 0x40, 0xd6, 0xc1, 0x7b, 0xc2, 0x65, 0x59, 0x33, 0xff, 0x24, 0x9b, 0xd0,
	0x5c, 0xb0, 0x67, 0x65, 0x9a, 0x15, 0xc3, 0xd0, 0x3d, 0x73, 0xfa, 0xaf, 0x2e, 0x74, 0xe8, 0x78,
	0x74, 0xab, 0x64, 0x0e, 0xea, 0x43, 0x9b, 0xa3, 0x1c, 0xa5, 0xd3, 0x02, 0x72, 0x83, 0x9a, 0x91,
	0x1c, 0xc0, 0x1a, 0x47, 0x91, 0xa5, 0x89, 0xc0, 0x92, 0xc0, 0xd5, 0x04, 0xb5, 0x94, 0x9c, 0x54,
	0x08, 0x9e, 0x46, 0xd8, 0xf9, 0x44, 0x28, 0x6e, 0x7c, 0xcd, 0x50, 0x5e, 0xbe, 0x40, 0x31, 0xf1,
	0x1b, 0xba, 0xa3, 0x19, 0xeb, 0xf2, 0x9b, 0x3f, 0xc9, 0x6f, 0xd5, 0xe5, 0xff, 0xca, 0xcf, 0x9b,
	0x0b, 0x70, 0x87, 0x7c, 0x81, 0x7c, 0xac, 0x44, 0x94, 0x97, 0x89, 0x51, 0x08, 0xf6, 0x88, 0xf7,
	0xcb, 0xcc, 0x48, 0xb2, 0xa3, 0xbc, 0x4c, 0xa6, 0x44, 0xb4, 0x22, 0xc9, 0x4a, 0xc8, 0x69, 0x5d,
	0xd0, 0x6e, 0x21, 0xa8, 0x3a, 0xf2, 0x8d, 0xa1, 0xea, 0xb4, 0x65, 0xc9, 0x8e, 0xfe, 0xd6, 0xd4,
	0x43, 0x4b, 0xff, 0x3e, 0x47, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x60, 0x24, 0x63, 0x4c,
	0x03, 0x00, 0x00,
}
